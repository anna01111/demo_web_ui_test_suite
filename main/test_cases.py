from main.home_page import HomePage
from main.basket_page import BasketPage
from main.product_page import ProductPage
from main.login_popup import LoginPopup
from main.register_popup import RegisterPopup
from main.test_data import *
from time import sleep
from pytest import mark


def test_login_valid_credentials(browser):
    """
    Log in with valid user credentials.
    Check if a home page changes its appearance accordingly.
    """

    # Test Set Up
    home_page = HomePage(driver=browser)
    home_page.go()

    # Test Actions
    home_page.login_button.click()
    home_page.switch_to_pop_up()

    login_popup = LoginPopup(driver=browser)
    login_popup.username_field.input_text(username)
    login_popup.password_field.input_text(password)
    login_popup.login_button.click()

    # Test Assertions
    assert home_page.account_button.text == 'ACCOUNT'
    assert home_page.logged_in_button.text == 'Logged in as User Name'

    # Test Clean Up
    browser.quit()


def test_login_invalid_credentials(browser):
    """
    Try to log in with invalid password.
    Check that the login attempt fails.
    """

    # Test Set Up
    home_page = HomePage(driver=browser)
    home_page.go()

    # Test Actions
    home_page.login_button.click()
    home_page.switch_to_pop_up()

    login_popup = LoginPopup(driver=browser)
    login_popup.username_field.input_text(username)
    login_popup.password_field.input_text('invalid_password')
    login_popup.login_button.click()

    # Test Assertions
    assert login_popup.login_message.text == 'Invalid login credentials.'

    assert not home_page.account_button_present_on_page
    assert not home_page.logged_in_button_present_on_page

    # Test Clean Up
    browser.quit()


def test_logout(browser):
    """
    Log out from an account.
    Check if a home page changes its appearance accordingly.
    """

    # Test Set Up
    home_page = HomePage(driver=browser)
    home_page.go()

    # Test Actions
    home_page.login_button.click()
    home_page.switch_to_pop_up()

    login_popup = LoginPopup(driver=browser)
    login_popup.username_field.input_text(username)
    login_popup.password_field.input_text(password)
    login_popup.login_button.click()

    home_page.logout_button.click()

    # Test Assertions
    assert not home_page.account_button_present_on_page
    assert not home_page.logged_in_button_present_on_page
    assert not home_page.logout_button_present_on_page
    assert home_page.login_button.text == 'Login'
    assert home_page.register_button.text == 'Register'

    # Test Clean Up
    browser.quit()


def test_registration_valid_credentials(browser):
    """
    Register with valid data (log in performs automatically).
    Check if a home page changes its appearance accordingly.
    """

    # Test Set Up
    home_page = HomePage(driver=browser)
    home_page.go()

    # Test Actions
    home_page.register_button.click()
    home_page.switch_to_pop_up()

    register_popup = RegisterPopup(driver=browser)
    register_popup.username_field.input_text(autogenerated_username)
    register_popup.first_name_field.input_text(autogenerated_first_name)
    register_popup.last_name_field.input_text(autogenerated_last_name)
    register_popup.email_field.input_text(autogenerated_email)
    register_popup.password_field.input_text(autogenerated_password)

    register_popup.register_button.click()

    # Test Assertions
    assert home_page.account_button.text == 'ACCOUNT'
    assert home_page.logout_button.text == 'Logout'
    expected_text = f'Logged in as {autogenerated_first_name} {autogenerated_last_name}'
    assert home_page.logged_in_button.text == expected_text

    # Test Clean Up
    browser.quit()


@mark.skip(reason='Feature not yet implemented')
def test_registration_empty_fields(browser):
    pass


@mark.skip
def test_registration_existing_user(browser):
    pass


def test_add_product_to_cart(browser):
    """
    Add a product to a shopping cart. Check if a correct name, price and
    number of products are displayed across the pages.
    """

    # Test Set Up
    home_page = HomePage(driver=browser)
    home_page.go()

    # Test Actions

    # Collecting data for future comparison to assure the same product is displayed.
    home_page_product_name = home_page.product_name.text
    home_page_product_price = home_page.product_price.text

    home_page.product_image.click()
    product_page = ProductPage(driver=browser)

    # Collecting data for future comparison to assure the same product is displayed.
    product_page_product_name = product_page.product_name.text
    product_page_product_price = product_page.product_price.text

    product_page.add_to_card_button.click()
    product_page.basket_button.click()
    basket_page = BasketPage(driver=browser)

    # Collecting data for future comparison to assure the same product is displayed.
    basket_page_product_name = basket_page.product_name.text
    basket_page_unit_price = basket_page.unit_price.text

    # Test Assertions
    assert basket_page.basket_button.text == '1 item(s) in cart'
    assert home_page_product_name == product_page_product_name == basket_page_product_name
    assert home_page_product_price == product_page_product_price == basket_page_unit_price

    # Test Clean Up
    browser.quit()


def test_remove_product_from_cart(browser):
    """
    Remove a product from a shopping cart.
    Check if a basket page changes its appearance accordingly .
    """

    # Test Set Up
    home_page = HomePage(driver=browser)
    home_page.go()

    # Test Actions
    home_page.product_image.click()

    product_page = ProductPage(driver=browser)
    product_page.add_to_card_button.click()
    sleep(2)
    product_page.basket_button.click()

    basket_page = BasketPage(driver=browser)
    basket_page.remove_icon.click()
    sleep(2)

    # Test Assertions

    assert not basket_page.product_present_on_page
    assert basket_page.basket_button.text == '0 items in cart'

    # Test Clean Up
    browser.quit()


@mark.skip
def test_buy_product_user_logged_in(browser):
    pass


@mark.skip(reason='Feature not yet implemented')
def test_buy_product_user_not_logged_in(browser):
    pass


@mark.skip
def test_buy_multiple_products(browser):
    pass


@mark.skip
def test_checkout_with_empty_card(browser):
    pass


def test_update_basket_button(browser):
    """
    Order total amount remains unchanged after pressing 'Update basket' button.
    """
    # Test Set Up
    home_page = HomePage(driver=browser)
    home_page.go()

    # Test Actions
    home_page.product_image.click()

    product_page = ProductPage(driver=browser)
    product_page.add_to_card_button.click()
    product_page.basket_button.click()

    basket_page = BasketPage(driver=browser)
    sleep(2)
    order_summary_total = basket_page.order_summary_total.text
    basket_page.update_basket_button.click()
    sleep(2)

    # Test Assertions
    assert basket_page.order_summary_total.text == order_summary_total

    # Test Clean Up
    browser.quit()


@mark.skip
def test_order_status(browser):
    pass


@mark.skip
def test_navigate_to_home_page(browser):
    pass


@mark.skip
def test_social_media_links(browser):
    pass


@mark.skip
def test_banner_appearance(browser):
    pass

